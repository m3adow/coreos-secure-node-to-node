#cloud-config
# Inspired by https://github.com/cornelius-keller/coreos-vagrant-tinc/blob/master/user-data
hostname: node3

write_files:
  - path: "/etc/environment"
    permissions: "0644"
    owner: "root"
    content: |
      COREOS_PUBLIC_IPV4=10.200.0.2
      ETCDCTL_CA_FILE=/etc/ssl/etcd/ca.crt
      ETCDCTL_CERT_FILE=/etc/ssl/etcd/node3.crt
      ETCDCTL_KEY_FILE=/etc/ssl/etcd/node3.key
      ETCDCTL_ENDPOINT=https://127.0.0.1:2379
      # Client Env Vars
      ETCD_CA_FILE=/etc/ssl/etcd/ca.crt
      ETCD_CERT_FILE=/etc/ssl/etcd/node3.crt
      ETCD_KEY_FILE=/etc/ssl/etcd/node3.key
      # Peers Env Vars
      ETCD_PEER_CA_FILE=/etc/ssl/etcd/ca.crt
      ETCD_PEER_CERT_FILE=/etc/ssl/etcd/node3.crt
      ETCD_PEER_KEY_FILE=/etc/ssl/etcd/node3.key
coreos:
  etcd2:
    name: "node3"
    data-dir: /var/lib/etcd2
    # clients
    advertise-client-urls: https://10.200.0.2:2379
    listen-client-urls: https://0.0.0.0:2379
    # peers
    initial-advertise-peer-urls: https://10.200.0.2:2380
    listen-peer-urls: https://10.200.0.2:2380
    # cluster
    initial-cluster: node3=https://10.200.0.2:2380,node1=https://10.100.0.2:2380,node2=https://10.150.0.2:2380
    initial-cluster-state: new
    initial-cluster-token: etcd-cluster-1
  flannel:
    interface: 10.200.0.2
    etcd_endpoints: https://10.200.0.2:2379,https://10.100.0.2:2379,https://10.150.0.2:2379
    etcd_cafile: /etc/ssl/etcd/ca.crt
    etcd_certfile: /etc/ssl/etcd/node3.crt
    etcd_keyfile: /etc/ssl/etcd/node3.key
  locksmith:
    endpoint: https://10.200.0.2:2379,https://10.100.0.2:2379,https://10.150.0.2:2379
    etcd_cafile: /etc/ssl/etcd/ca.crt
    etcd_certfile: /etc/ssl/etcd/node3.crt
    etcd_keyfile: /etc/ssl/etcd/node3.key
  update:
    reboot-strategy: "etcd-lock"
  units:
    - name: 00-eth0-network
      runtime: true
      content: |
        [Match]
        Name=eth0

        [Network]
        DNS=8.8.8.8
        DNS=8.8.4.4
        
        Address=10.200.0.2/24
        Gateway=10.200.0.1
    - name: etcd2.service
      drop-ins:
        - name: 30-certificates.conf
          content: |
            [Service]
            EnvironmentFile=/etc/environment
      command: "start"
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            Environment=FLANNELD_IFACE=10.200.0.2
            EnvironmentFile=/etc/environment
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16", "Backend": { "Type": "vxlan"} }'
      command: start
write_files:
  - path: "/etc/resolv.conf"
    permissions: "0644"
    owner: "root"
    content: |
      nameserver 8.8.8.8
      nameserver 8.8.4.4
      
  - path: /etc/ssh/sshd_config
    permissions: 600
    owner: root:root
    content: |
      PermitRootLogin no
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      AllowUsers core kube
  - path: /root/.vimrc
    permissions: 0644
    owner: root:root
    content: |
      se nu
      se ai
      se shiftwidth=2
      se tabstop=2
      se expandtab
users:
  - name: "kube"
    groups:
      - "sudo"
      - "docker"

# TINC

coreos:
  units:
    - name: early-docker.service
      command: start
      enable: true
    - name: tinc-env.service
      enable: true
      command: start
      content: |
        [Unit]
        Description=Tinc Service
        After=etcd.service etcd2.service early-docker.service flanneld.service
        Before=early-docker.target fleet.service
        
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "echo \"TINC_HOSTNAME=`hostname -s | sed -e 's/-/_/g'`\" > /etc/tinc-env"
    - name: flannel-wait.service
      command: start
      enable: true
      content: |

        [Unit]
        Description=Wait For Flannel
        Requires=flanneld.service
        After=etcd.service etcd2.service early-docker.service flanneld.service
        Before=early-docker.target

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "echo \"TINC_HOSTNAME=`hostname -s | sed -e 's/-/_/g'`\" > /etc/tinc-env"
        ExecStartPre=/bin/sh -c "while [ ! -f /run/flannel/subnet.env ] ; do sleep 1; done"

    - name: tinc-conf.service
      enable: true
      command: start
      content: |
        [Unit]
        Description=Tinc Configuration Service
        After=etcd.service etcd2.service early-docker.service flanneld.service
        Before=early-docker.target fleet.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "echo \"TINC_HOSTNAME=`hostname -s | sed -e 's/-/_/g'`\" > /etc/tinc-env"
    - name: tinc.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Tinc VPN Service
        Requires=flannel-wait.service
        After=early-docker.service flanneld.service tinc-env.service flannel-wait.service

        Before=early-docker.target

        [Service]
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        EnvironmentFile=/etc/tinc-env

        EnvironmentFile=/etc/environment


        ExecStartPre=/usr/bin/docker pull jenserat/tinc
        ExecStartPre=/usr/bin/rm -rf /srv/tinc
        ExecStartPre=/usr/bin/mkdir -p /srv/tinc
        ExecStartPre=/bin/sh -c "/usr/bin/docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc init $TINC_HOSTNAME"
        ExecStartPre=/bin/sh -c "/usr/bin/docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add Address = 10.200.0.2"
        EnvironmentFile=/run/flannel/subnet.env
        ExecStartPre=/bin/sh -c "/usr/bin/docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add Subnet = `echo $FLANNEL_SUBNET | sed -e 's/1\\/24/0\\/24/'`"
        ExecStartPre=/bin/sh -c "/usr/bin/docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add Mode = switch"
        ExecStartPre=/bin/sh -c "/usr/bin/docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add DeviceType = tap"
        ExecStartPre=-/usr/bin/docker rm -f tinc 
        ExecStartPre=/usr/bin/docker run --name tinc  -d --volume /srv/tinc:/etc/tinc --net=host --device=/dev/net/tun --cap-add NET_ADMIN jenserat/tinc start  -D

        ExecStart=/bin/sh -c "while true; do etcdctl set /services/tinc/$TINC_HOSTNAME  \"\\\"` cat /srv/tinc/hosts/$TINC_HOSTNAME `\"\\\" --ttl 60;sleep 45;done"

        ExecStop=/usr/bin/docker rm -f tinc
        ExecStopPost=/bin/sh -c  "etcdctl rm /services/tinc/$TINC_HOSTNAME"
  
  
  
write_files:
  - path: /srv/tinc_initial_config.sh
    permissions: 0774
    owner: root
    content: |
      #!/bin/sh
      export DOCKER_HOST=unix:///var/run/early-docker.sock
      . /etc/tinc-env
      for host in `etcdctl ls /services/tinc/ | sed -e 's/\/services\/tinc\///'`; do
        if [ "$TINC_HOSTNAME" != "$host" ]; then
          docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add ConnectTo = $host
          etcdctl get /services/tinc/$host | sed -e 's/\"//g' > /srv/tinc/hosts/$host
        fi
      done
      docker exec tinc /usr/sbin/tinc reload

  - path: /srv/tinc_conf_updater.sh
    permissions: 0774
    owner: root
    content: |
      #!/bin/sh
      export DOCKER_HOST=unix:///var/run/early-docker.sock
      . /etc/tinc-env
      host=${ETCD_WATCH_KEY/\/services\/tinc\//}
      echo "host is $host"
      echo "$ETCD_WATCH_KEY\" key was updated to \"$ETCD_WATCH_VALUE\" value by \"$ETCD_WATCH_ACTION\" action"
      if [ $TINC_HOSTNAME != $host ]; then
        if [ "$ETCD_WATCH_ACTION" = "set" ]; then
          echo "configuring new tinc host $host"
          current_value="";
          if [ -f /srv/tinc/hosts/$host ]; then
            current_value="$( cat /srv/tinc/hosts/$host )"
          fi
          if [ "$ETCD_WATCH_VALUE" != "\"$current_value\"" ]; then
            docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc add ConnectTo = $host
            etcdctl get /services/tinc/$host | sed -e 's/\"//g' > /srv/tinc/hosts/$host
            docker exec tinc /usr/sbin/tinc reload
            echo "done"
          else
           echo "old value = new value; nothing to do"
          fi
        fi
        if [ "$ETCD_WATCH_ACTION" = "delete" ] || [ "$ETCD_WATCH_ACTION" = "expire" ]; then
          echo "removing tinc host $host"
          docker run --rm --volume /srv/tinc:/etc/tinc  jenserat/tinc del ConnectTo = $host
          rm -f /srv/tinc/hosts/$host
          docker exec tinc /usr/sbin/tinc reload
          echo "done"
        fi
      fi